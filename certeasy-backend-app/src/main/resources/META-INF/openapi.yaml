openapi: "3.0.0"
info:
  version: 1.0.0
  title: Certificate-API
  description: |
    API to issue certificates.
    
    ## Key Concepts
    
    ### Issuer
    Represents a certificate authority. You need an Issuer in order to issue Certificates. You can have as many issuers as you need. There are two types of issuers: 
     - Root-CA
     - Sub-CA
    
    #### Root-CA
    A Root CA is one that signed it's own certificate.
    
    #### Sub-CA
    A Sub-CA is a certificate authority that had its certificate signed by another CA.
    
    ### Certificate
    Represents An X509 V3 Certificate.

  license:
    name: Apache License 2.0
servers:
  - url: http://localhost:8080/api/
paths:

  /issuers:
    get:
      summary: List Issuers
      operationId: getIssuersList
      description: Get List of Issuers available
      tags:
        - Issuers
      responses:
        200:
          description: Issuers List retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IssuerInfo"
                minItems: 0
        500:
          $ref: "#/components/responses/ServerError"

  /issuers/{issuerId}:
    delete:
      summary: Delete Issuer
      operationId: deleteIssuer
      description: Delete an existing issuerId. All stored certificates issued by the referenced issuerId will be deleted.
      tags:
        - Issuers
      parameters:
        - $ref: "#/components/parameters/IssuerId"
      responses:
        204:
          description: Issuer deleted successfully
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/IssuerNotFound'
        422:
          $ref: '#/components/responses/IssuerSpecConstraintViolation'
        500:
          $ref: "#/components/responses/ServerError"

  /issuers/{issuerId}/cert-spec:
    post:
      summary: Create Issuer from spec
      operationId: createIssuerFromSpec
      description: Create a new Issuer from a specification.
      tags:
        - Issuers
      parameters:
        - $ref: "#/components/parameters/IssuerId"
      requestBody:
        description: Issuer creation body
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IssuerCertSpec"
      responses:
        204:
          description: Issuer created successfully
        400:
          $ref: '#/components/responses/BadRequest'
        422:
          $ref: '#/components/responses/IssuerSpecConstraintViolation'
        409:
          $ref: '#/components/responses/IssuerIDTaken'
        500:
          $ref: "#/components/responses/ServerError"

  /issuers/{issuerId}/cert-pem:
    post:
      summary: Create Issuer from PEM
      operationId: createIssuerFromPem
      description: Create a new Issuer from a PEM bundle.
      tags:
        - Issuers
      parameters:
        - $ref: "#/components/parameters/IssuerId"
      requestBody:
        description: Issuer creation body
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CertPem"
      responses:
        204:
          description: Issuer created successfully
        400:
          $ref: '#/components/responses/BadRequest'
        422:
          $ref: '#/components/responses/IssuerPemConstraintViolation'
        409:
          $ref: '#/components/responses/IssuerIDTaken'
        500:
          $ref: "#/components/responses/ServerError"

  /issuers/{issuerId}/cert-ref:
    post:
      summary: Create Issuer from issued certificate
      operationId: createIssuerFromRef
      description: Create a new Issuer from a Sub-CA certificate issued by an existing issuerId.
      tags:
        - Issuers
      parameters:
        - $ref: "#/components/parameters/IssuerId"
      requestBody:
        description: Issuer creation body
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IssuerCertRef"
      responses:
        204:
          description: Issuer created successfully
        400:
          $ref: '#/components/responses/BadRequest'
        422:
          $ref: '#/components/responses/IssuerCertRefConstraintViolation'
        409:
          $ref: '#/components/responses/IssuerIDTaken'
        500:
          $ref: "#/components/responses/ServerError"


  /issuers/{issuerId}/certificates/tls-server:
    post:
      summary: Issue TLS-Server certificate
      operationId: issueTlsServerCert
      description: |
        Issues a new Certificate to identify a TLS-Server. An RSA Key-pair will be generated and used for the Certificate. 
        The issued certificate will contain the following extensions:
        
        *Subject Alternative Name (Non Critical)*:
         * The domain names provided
        
        *Key Usage (Critical)*:
         * Digital Signature
         * Key Encipherment
        
        *Extended Key Usage (Critical)*:
         * TLS Web Server Authentication (OID 1.3.6.1.5.5.7.3.1)

      tags:
        - Certificates
      parameters:
        - $ref: "#/components/parameters/IssuerId"
      requestBody:
        description: The Certificate details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TLSServerCertificateRequest"

      responses:
        200:
          $ref: '#/components/responses/SuccessfullyIssuedCert'
        400:
          $ref: '#/components/responses/BadRequest'
        422:
          $ref: '#/components/responses/ConstraintViolation'
        500:
          $ref: "#/components/responses/ServerError"



  /issuers/{issuerId}/certificates/personal:
    post:
      summary: Issue Personal Certificate
      operationId: issuePersonalCert
      description: |
        Issues a new Certificate to identify a person. An RSA Key-pair will be generated and used for the Certificate.
        The issued certificate will contain the following extensions:

          *Key Usage (Critical)*:
          * Digital Signature
          * Non Repudation
        
         *Extended Key Usage (Critical)*:
          * TLS Web Client Authentication (OID 1.3.6.1.5.5.7.3.2)
          * Code Signing (OID 1.3.6.1.5.5.7.3.3)
          * Email Protection (OID 1.3.6.1.5.5.7.3.4)
      tags:
        - Certificates
      parameters:
        - $ref: "#/components/parameters/IssuerId"
      requestBody:
        description: The Certificate details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonalCertificateRequest'

      responses:
        200:
          $ref: '#/components/responses/SuccessfullyIssuedCert'
        400:
          $ref: '#/components/responses/BadRequest'
        422:
          $ref: '#/components/responses/ConstraintViolation'
        500:
          $ref: "#/components/responses/ServerError"


  /issuers/{issuerId}/certificates/employee:
    post:
      summary: Issue Employee Certificate
      operationId: issueEmployeeCert
      description: |
        Issues a new Certificate to identify an Employee of an organization. An RSA Key-pair will be generated and used for the Certificate.
        The issued certificate will contain the following extensions:

          *Key Usage (Critical)*:
          * Digital Signature
          * Non Repudiation
        
         *Extended Key Usage (Critical)*:
          * TLS Web Client Authentication (OID 1.3.6.1.5.5.7.3.2)
          * Code Signing (OID 1.3.6.1.5.5.7.3.3)
          * Email Protection (OID 1.3.6.1.5.5.7.3.4)

      tags:
        - Certificates
      parameters:
        - $ref: "#/components/parameters/IssuerId"
      requestBody:
        description: The Certificate details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeCertificateRequest'

      responses:
        200:
          $ref: '#/components/responses/SuccessfullyIssuedCert'
        400:
          $ref: '#/components/responses/BadRequest'
        422:
          $ref: '#/components/responses/ConstraintViolation'
        500:
          $ref: "#/components/responses/ServerError"


  /issuers/{issuerId}/certificates/sub-ca:
    post:
      summary: Issue Sub Certificate-Authority Certificate
      operationId: issueSubCACert
      description: |
        Issues a Sub Certificate-Authority Certificate. An RSA Key-pair will be generated and used for the Certificate.
        The issued certificate will contain the following extensions:

          *Basic Constraint (Critical)*

          *Key Usage (Critical)*:
          * Certificate Sign
          * Sign CRL

      tags:
        - Certificates
      parameters:
        - $ref: "#/components/parameters/IssuerId"
      requestBody:
        description: The Certificate details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubCACertificateRequest'

      responses:
        200:
          $ref: '#/components/responses/SuccessfullyIssuedCert'
        400:
          $ref: '#/components/responses/BadRequest'
        422:
          $ref: '#/components/responses/ConstraintViolation'
        500:
          $ref: "#/components/responses/ServerError"


  /issuers/{issuerId}/certificates/custom/attributes:
    get:
      summary: List Distinguished Name attributes
      operationId: listCertAttributes
      description: Get List of attributes that may be used on the Certificate Subject Distinguished name. The attributes returned by this operation are expected to be used only when isuing custom certificates.
      tags:
        - Certificates
      parameters:
        - $ref: "#/components/parameters/IssuerId"
      responses:
        '200':
          description: An array of attributes
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    key:
                      type: string
                      description: Unique identifier of the attribute
                      example: "common-name"
                    display_name:
                      type: string
                      description: The name to be displayed on User interface
                      example: Common Name
                    description:
                      type: string
                      description: The purpose/intent of the attribute
                      example: The name used to refer to the subject
                    repeatable:
                      type: boolean
                      description: Indicates wether the attribute may appear multiple times in a distinguished name
                      example: false
                    max_items:
                      type: integer
                      description: Maximum number of items allowed. Applicable only when attribute is multivalue
                      example: 3
                    required:
                      type: boolean
                      description: Indicates whether the attribute is required
                      example: true
                  required:
                    - key
                    - display_name
                    - description
                    - repeatable
                    - required
                minItems: 1
        500:
          $ref: "#/components/responses/ServerError"

  /issuers/{issuerId}/certificates/custom:
    post:
      summary: Issue Customized Certificate
      operationId: issueCustomCert
      description: Issues a new Customized Certificate. An RSA Key-pair will be generated and used for the Certificate.
      tags:
        - Certificates
      parameters:
        - $ref: "#/components/parameters/IssuerId"
      requestBody:
        description: The Certificate details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomCertificateRequest'

      responses:
        200:
          $ref: '#/components/responses/SuccessfullyIssuedCert'
        400:
          $ref: '#/components/responses/BadRequest'
        422:
          $ref: '#/components/responses/ConstraintViolation'
        500:
          $ref: "#/components/responses/ServerError"


  /issuers/{issuerId}/certificates:
    get:
      summary: List issued certificates
      operationId: listIssuedCerts
      description: List all the certificates issued by the selected issuerId. Will include the certificate of the issuerId.
      tags:
        - Certificates
      parameters:
        - $ref: "#/components/parameters/IssuerId"
      responses:
        200:
          description: Certificates List Retrieved Successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IssuedCertSummary'
        500:
          $ref: "#/components/responses/ServerError"

  /issuers/{issuerId}/certificates/{serial}:
    get:
      summary: Get Certificate Information
      operationId: getCertInfo
      description: Get information of a certificate issued by the CA
      tags:
        - Certificates
      parameters:
        - name: serial
          in: path
          description: The serial number of the certificate
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/IssuerId"

      responses:
        200:
          description: Certificate Information Retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuedCertInfo'
        404:
          $ref: '#/components/responses/CertOrIssuerNotFound'
        500:
          $ref: "#/components/responses/ServerError"
    delete:
      summary: Delete certificate
      operationId: deleteCert
      description: Delete an existing certiticate
      tags:
        - Certificates
      parameters:
        - name: serial
          in: path
          description: The serial number of the certificate
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/IssuerId"

      responses:
        204:
          description: Certificate deleted successfully
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/CertOrIssuerNotFound'
        500:
          $ref: "#/components/responses/ServerError"

  /issuers/{issuerId}/certificates/{serial}/pem:
    get:
      summary: Get Certificate pem
      operationId: getCertificatePem
      description: Get the certificate files in PEM format.
      tags:
        - Certificates
      parameters:
        - $ref: "#/components/parameters/IssuerId"
        - $ref: "#/components/parameters/SerialNumber"
      responses:
        200:
          description: Pem retrieve successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertPem"
        404:
          $ref:  "#/components/responses/CertOrIssuerNotFound"
        500:
          $ref: "#/components/responses/ServerError"

  /issuers/{issuerId}/certificates/{serial}/der:
    get:
      summary: Get Certificate DER content
      operationId: getCertificateDer
      description: Get the certificate DER content Base64 encoded.
      tags:
        - Certificates
      parameters:
        - $ref: "#/components/parameters/IssuerId"
        - $ref: "#/components/parameters/SerialNumber"
      responses:
        200:
          description: DER retrieved successfully.
          content:
            text/plain:
              schema:
                type: string
                description: Base64 encoded DER content

        404:
          $ref: "#/components/responses/CertOrIssuerNotFound"
        500:
          $ref: "#/components/responses/ServerError"


components:
  schemas:

    SubjectAlternativeName:
      type: object
      description: A Certificate Subject Alternative name
      properties:
        type:
          type: string
          description: The type of alternative name
          enum:
            - DNS
            - EMAIL
            - IP_ADDRESS
            - URI
            - DIRECTORY_NAME
            - OTHER_NAME
        value:
          type: string
          description: The value of the alternative name
          example: example.com
      required:
        - type
        - value


    KeyUsage:
      type: string
      description: Represents an peration for which the  Certificate public key is intended to be used.
      enum:
        - DigitalSignature
        - KeyEncipherment
        - DataEncipherment
        - KeyAgreement
        - DecipherOnly
        - EncipherOnly
        - CertificateSign
        - SignCRL
        - NonRepudiation

    ExtendedKeyUsage:
      type: string
      description: A second degree of restriction in terms of how the public key of a Certificate is intended to be used
      enum:
        - TLS_WEB_SERVER_AUTH
        - TLS_WEB_CLIENT_AUTH
        - SIGN_CODE
        - EMAIL_PROTECTION
        - TIMESTAMPING
        - OCSP_SIGNING
        - IPSEC_END_SYSTEM
        - IPSEC_TUNNEL
        - IPSEC_USER

    CertValidity:
      type: object
      description: The validity of a certificate
      properties:
        from:
          type: string
          format: date
          description: The date from which the certificate is validate
          example: "2023-01-01"
        until:
          type: string
          format: date
          description: The date from which the certificate should be considered expired
          example: "2023-12-31"
      required:
        - from
        - until

    Address:
      type: object
      description: Represents a Geographic location
      properties:
        country:
          type: string
          description: The ISO alpha-2 contry code
          example: MZ
        state:
          type: string
          description: The name of the the state/province in the country
          example: Maputo
        locality:
          type: string
          description: The locality or district of the state
          example: Boane
        street_address:
          type: string
          description: The name of the street plus the number and name of the building
          example: 1234 Main Street
      required:
        - country
        - state
        - locality
        - street_address


    IssuedCertSummary:
      type: object
      description: A summary of a certificate issued by this server
      properties:
        name:
          type: string
          description: Name of the issued certified. It is obtained from the Certificate Common-Name.
          example: my-cert
        serial:
          type: string
          description: The serial number of the issued Certificate
          example: d9028c1c-6778-403a-b888-c72d7de5aeb3
        ca:
          type: boolean
          description: Whether it is a certificate authority or not
      required:
        - name
        - serial
        - ca

    BasicConstraints:
      type: object
      description: The Basic constraints extension
      properties:
        ca:
          type: boolean
          description: Whether the certificate is a certificate authority
        path_length:
          type: integer
          description: The maximum depth of CAs that may exist below this CA. This limit is enforced when issuing a sub-ca certificate.
          default: 0
          minimum: 0
      required:
        - ca

    IssuedCertInfo:
      allOf:
        - $ref: '#/components/schemas/IssuedCertSummary'
        - type: object
          readOnly: true
          description: Information of an issued certificate
          properties:
            key_size:
              type: integer
              description: The size of the Certificate Private Key in bytes
              example: 512
            distinguished_name:
              type: string
              description: The subject X.500 Distinguished name
              example: CN=John Smith, OU=Test, O=IBM, C=GB
            issuer:
              type: string
              description: The subject X.500 Name of the Issuer
              example: CN=Ipsum, OU=Test, O=IBM, C=GB
            basic_constraints:
              $ref: '#/components/schemas/BasicConstraints'
            subject_alt_names:
              type: array
              items:
                $ref: '#/components/schemas/SubjectAlternativeName'
            key_usages:
              type: array
              items:
                $ref: '#/components/schemas/KeyUsage'
            extended_key_usages:
              type: object
              properties:
                usages:
                  type: array
                  items:
                    $ref: '#/components/schemas/ExtendedKeyUsage'
                effect:
                  type: string
                  enum:
                    - Info
                    - Enforce
              required:
                - effect
                - usages
            validity:
              $ref: '#/components/schemas/CertValidity'

      required:
        - name
        - key_size
        - distinguished_name
        - issuerId
        - basic_constraints
        - key_usage
        - validity

    IssuerInfo:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the issuerId
          example: myca
        serial:
          type: string
          description: The unique serial number of the certificate
          example: 12345678910
        type:
          type: string
          description: The type of issuerId
          enum:
            - ROOT
            - SUB_CA
        dn:
          type: string
          description: The Distinguished name of the issuerId certificate
          example: cn=John Doe, ou=People, dc=sun.com
        path_length:
          type: integer
          description: The maximum depth of CAs that may exist below this CA. This limit is enforced when issuing a sub-ca certificate.
          default: 0
          minimum: 0
      required:
        - id
        - serial
        - type
        - dn
        - path_length

    CertPem:
      type: object
      description: PEM Encoded Certificate information.
      properties:
        cert_file:
          type: string
          description: The PEM encoded certificate
        key_file:
          type: string
          description: The PEM encoded private key
      required:
        - cert_file
        - key_file

    IssuerCertRef:
      type: object
      description: References a Sub-CA certificate issued by an existing issuerId.
      properties:
        issuer_id:
          type: string
          description: The ID of the issuerId of the Sub-CA certificate to be used
        serial:
          type: string
          description: The serial of the Sub-CA certificate to be used
      required:
        - issuer_id
        - serial

    IssuerCertSpec:
      type: object
      description: Specification of a certificate to be created. When specified, an RSA Key-pair will be generated and used for the Certificate.
      properties:
        name:
          type: string
          description: The common name of the authority
          example: myca
        key_strength:
          type: string
          description: The strength of the key pair to be generated.
          enum:
            - LOW
            - MEDIUM
            - HIGH
            - VERY_HIGH
        path_length:
          type: integer
          description: |
            The maximum depth of CAs that may exist below this CA. 
            The **-1** value means NO limit while the **0** value means NO Sub-CA allowed. 
            This limit is enforced when issuing a sub-ca certificate.
          minimum: -1
        validity:
          $ref: "#/components/schemas/CertValidity"
        address:
          $ref: "#/components/schemas/Address"
      required:
        - name
        - key_strength
        - path_length
        - address
        - validity

    NewIssuerBody:
      description: Request body regarding new issuerId to be created
      oneOf:
        - $ref: "#/components/schemas/IssuerCertPemBody"
        - $ref: "#/components/schemas/IssuerCertSpecBody"
        - $ref: "#/components/schemas/IssuerCertRefBody"


    IssuerCertPemBody:
      type: object
      description: Request body to create new issuerId using existing certificate
      properties:
        pem:
          $ref: "#/components/schemas/IssuerCertPem"
      required:
        - pem

    IssuerCertSpecBody:
      type: object
      description: Request body to create new issuerId certificate from a specification
      properties:
        spec:
          $ref: "#/components/schemas/IssuerCertSpec"
      required:
        - spec

    IssuerCertRefBody:
      type: object
      description: Request body to create new issuerId from a Sub-CA certificate issued by an existing issuerId.
      properties:
        ref:
          $ref: "#/components/schemas/IssuerCertRef"
      required:
        - ref

    BaseCertificateRequest:
      type: object
      properties:
        validity:
          $ref: "#/components/schemas/CertValidity"
        key_strength:
          type: string
          description: The cryptography strength of the key-pair to be generated
          enum:
            - LOW
            - MEDIUM
            - HIGH
            - VERY_HIGH


    BaseCertificateRequestWithAddress:
      allOf:
        - $ref: '#/components/schemas/BaseCertificateRequest'
        - type: object
          properties:
            address:
              $ref: '#/components/schemas/Address'



    CustomCertificateRequest:
      allOf:
        - $ref: "#/components/schemas/BaseCertificateRequest"
        - type: object
          description: A Request to generate a customized certificate
          properties:
            subject_distinguished_name:
              type: array
              description: Set of attributes that compose the Subject distinguished name. The order of the attributes matter
              items:
                type: object
                description: A Relative Distinguished Name
                properties:
                  key:
                    type: string
                    description: The unique identifier of the attribute
                    example: common-name
                  value:
                    type: string
                    description: A value for the attribute
                    example: example.com
                required:
                  - key
                  - value
                minItems: 1
            key_usage:
              type: array
              description: Defines the operations for which the  Certificate public key is intended to be used.
              items:
                $ref: '#/components/schemas/KeyUsage'
              minItems: 1
            extended_key_usage:
              type: array
              description: A second degree of restriction in terms of how the public key of a Certificate is intended to be used. The extended key usage is not about the operations that can be performed with the key, it is instead about the context in which those operations can be performed.
              items:
                $ref: '#/components/schemas/ExtendedKeyUsage'
              minItems: 1
            strict_extended_key_usage:
              type: boolean
              description: Defines whether the Extended Key Usage extension should be critial or not
              default: false
            subject_alt_names:
              type: array
              description: The subject alternative names to associate to the certificate
              items:
                $ref: '#/components/schemas/SubjectAlternativeName'


          required:
            - validity
            - key_strength
            - subject_distinguished_name
            - key_usage


    PersonalCertificateRequest:
      allOf:
        - $ref: "#/components/schemas/BaseCertificateRequestWithAddress"
        - type: object
          description: A Request to generate a certificate to identify an individual
          properties:
            first_name:
              type: string
              description: The person's first name
              example: Yaka
            surname:
              type: string
              description: The person's surname
              example: Matavele
            telephone:
              type: string
              description: The person's telephone number
            email_addresses:
              type: array
              description: The email addresses of the person
              items:
                type: string
                description: An email address
                minItems: 1
            usernames:
              type: array
              description: The usernames of the person. Computer and online usernames are expected to be Listed.
              items:
                type: string
                description: A username
                minItems: 1
          required:
            - validity
            - key_strength
            - location
            - first_name
            - surname
            - telephone


    EmployeeCertificateRequest:
      allOf:
        - $ref: "#/components/schemas/PersonalCertificateRequest"
        - type: object
          description: A Request to generate a certificate to identify an individual as an employee.
          properties:
            company:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the company to which the person is employed
                department:
                  type: string
                  description: The name of the department to which the employee belongs
              required:
                - name
                - department

    SubCACertificateRequest:
      allOf:
        - type: object
          description: A Request to generate a Sub Certificate-Authority certificate
          properties:
            name:
              type: string
              description: The name of the Sub Certificate Authority
              example: my-subca
        - $ref: "#/components/schemas/BaseCertificateRequestWithAddress"
        - required:
            - validity
            - key_strength
            - location
            - name

    TLSServerCertificateRequest:
      allOf:
        - $ref: "#/components/schemas/BaseCertificateRequestWithAddress"
        - type: object
          description: A Request to generate a Certificate to identify a TLS Server
          properties:
            domains:
              type: array
              description: The domains that are associated to the server. All listed domains will be added to the certificate as DNS Subject Alternative Names and The first domain in the array will be used as common-name.
              items:
                type: string
                description: A domain name
                example: example.com
              minItems: 1
          required:
            - domains
            - validity
            - key_strength
            - location


    IssuedCert:
      type: object
      description: Represents an issued certificate
      properties:
        serial:
          type: string
          description: The issued certificate serial number
          example: 448d28c6-814b-4d5d-863c-fc1a2fc8f355
      required:
        - serial



    Problem:
      type: object
      properties:
        type:
          type: string
          format: uri
          description: |
            An absolute URI that identifies the problem type.  When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          default: 'about:blank'
          example: 'https://zalando.github.io/problem/constraint-violation'
        title:
          type: string
          description: |
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        status:
          type: integer
          format: int32
          description: |
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: |
            A human readable explanation specific to this occurrence of the
            problem.
          example: Connection to database timed out
        instance:
          type: string
          format: uri
          description: |
            An absolute URI that identifies the specific occurrence of the problem.
            It may or may not yield further information if dereferenced.
    

    ConstraintViolation:
      description: Represents a violation of a constraint
      properties:
        field:
          type: string
          description: The input that violated the constraint
          example: body.name
        type:
          type: string
          description: The type of constraint violation
          enum:
            - required
            - presence
            - length
            - pattern
            - range
            - precedence
            - enum
            - format
            - state
        sub_type:
          type: string
          description: The sub type of constraint violation. This is only applicable to `state` violation
        message:
          type: string
          description: A message describing the constraint violation
          example: body.name MUST not be null be nor empty
      required:
        - field
        - type
        - message
    
    ConstraintViolationProblem:
      allOf:
        - $ref: "#/components/schemas/Problem"
        - type: object
          properties:
            violations:
              type: array
              items:
                $ref: "#/components/schemas/ConstraintViolation"
        - required:
            - type
            - title
            - detail
            - violations


  parameters:

    SerialNumber:
      name: serial
      in: path
      description: The serial number of the certificate
      required: true
      schema:
        type: string

    IssuerId:
      name: issuerId
      in: path
      required: true
      description: The unique identifier of the certificate issuerId
      schema:
        pattern: ^[a-z]+(-[a-z]+)*$
        example: lorem-ipsum

  responses:

    IssuerSpecConstraintViolation:
      description: Constraint violation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
          examples:
            invalid-body:
              value:
                type: /problems/constraint-violation
                title: Constraint Violation
                detail: The request contains one or more constraint violations
                status: 422
                violations:
                  - field: body.name
                    type: required
                    message: name must not be null nor empty
                  - field: body.address
                    type: required
                    message: address must not be null nor empty

    IssuerConstraintViolation:
      description: Constraint violation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
          examples:
            cert-file-not-ca:
              value:
                type: /problems/constraint-violation
                title: Constraint Violation
                detail: The request contains one or more constraint violations
                status: 422
                violations:
                  - field: body.name
                    type: required
                    message: name must not be null nor empty
    
    IssuerCertRefConstraintViolation:
      description: Constraint violation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
          examples:

            invalid-body:
              value:
                type: /problems/constraint-violation
                title: Constraint Violation
                detail: The request contains one or more constraint violations
                status: 422
                violations:
                  - field: body.issuer_id
                    type: required
                    message: issuerId must not be null nor empty
                  - field: body.serial
                    type: required
                    message: serial must not be null nor empty

            cert-not-found:
              value:
                type: /problems/constraint-violation
                title: Constraint Violation
                detail: The request contains one or more constraint violations
                status: 422
                violations:
                  - field: body.serial
                    type: state
                    sub_type: not-found
                    message: There is no certificate with a matching serial

            issuer-not-found:
              value:
                type: /problems/constraint-violation
                title: Constraint Violation
                detail: The request contains one or more constraint violations
                status: 422
                violations:
                  - field: body.issuer_id
                    type: state
                    sub_type: not-found
                    message: There is no issuer with a matching serial

            cert-not-ca:
              value:
                type: /problems/constraint-violation
                title: Constraint Violation
                detail: The request contains one or more constraint violations
                status: 422
                violations:
                  - field: body.issuer_id
                    type: state
                    sub_type: not-ca
                    message: The referenced certificate is not a CA


    IssuerPemConstraintViolation:
      description: Constraint violation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
          examples:
            cert-file-not-ca:
              value:
                type: /problems/constraint-violation
                title: Constraint Violation
                detail: The request contains one or more constraint violations
                status: 422
                violations:
                  - field: body.pem.cert_file
                    type: state
                    sub_type: not_ca
                    message: cert_file does not have a CA basic constraints
            invalid-key-file-format:
              value:
                type: /problems/constraint-violation
                title: Constraint Violation
                detail: The request contains one or more constraint violations
                status: 422
                violations:
                  - field: body.pem.key_file
                    type: format
                    message: key_file is not valid PEM encoded private key
            invalid-cert-file-format:
              value:
                type: /problems/constraint-violation
                title: Constraint Violation
                detail: The request contains one or more constraint violations
                status: 422
                violations:
                  - field: body.pem.cert_file
                    type: format
                    message: cert_file is not valid PEM encoded certificate
    
    SuccessfullyIssuedCert:
      description: Certificate issued successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IssuedCert'


    ServerError:  # Can be referenced as '#/components/responses/ServerError'
      description: An error occurred.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: /problems/server-error
            title: Server error
            status: 500
            detail: An internal server error occurred

    ConstraintViolation:
      description: Constraint violation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConstraintViolationProblem'
          example:
            type: /problems/constraint-violation
            title: Constraint Violation
            detail: The request contains one or more constraint violations
            status: 422
            violations:
              - field: body.location.country
                message: may not be empty
                type: required
              - field: body.groups
                message: must not contain more than 4 addresses
                type: length
              - field: path.name
                message: Name must not have numeric characters
                type: format
    IssuerIDTaken:
      description: Issuer ID taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: /problems/issuerId/id-taken
            title: Issuer ID Taken
            detail: There is already an issuerId with the provided ID
            status: 409
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: /problems/bad-request
            title: Bad Request
            status: 400
            detail: JSON Payload missing

    CaCertificateNotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: /problems/not-found
            title: Not found
            status: 404
            detail: CA Certificate not found


    CertificateNotFound:
      description: Certificate not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: /problems/certificate/not-found
            title: Not found
            status: 404
            detail: There is no certificate with a matching serial
    
    IssuerNotFound:
      description: Issuer NOT found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: /problems/issuerId/not-found
            title: Not found
            status: 404
            detail: There is no issuerId with a matching ID

    CertOrIssuerNotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
          examples:
            issuer-not-found:
              value:
                type: /problems/issuerId/not-found
                title: Not found
                status: 404
                detail: There is no issuerId with a matching ID
            certificate-not-found:
              value:
                type: /problems/certificate/not-found
                title: Not found
                status: 404
                detail: There is no certificate with a matching serial
