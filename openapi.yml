openapi: "3.0.0"
info:
  version: 1.0.0
  title: Easycert
  license:
    name: MIT
servers:
  - url: http://petstore.swagger.io/v1
paths:


  /dn-attributes:
    get:
      summary: List DN attributes 
      operationId: listAttributes
      description: Get List of attributes that may be used on the Distinguished name
      tags:
        - Attributes
      responses:
        '200':
          description: An array of attributes
          content:
            application/json:    
              schema:
                type: array
                items: 
                  type: object
                  properties:
                    key: 
                      type: string
                      description: Unique identifier of the attribute
                      example: "common-name"
                    display_name:
                      type: string
                      description: The name to be displayed on User interface 
                      example: Common Name
                    description:
                      type: string
                      description: The purpose/intent of the attribute
                      example: The name used to refer to the subject
                    multivalue: 
                      type: boolean
                      description: Indicates wether the attribute is an array
                      example: false
                    max_items: 
                      type: integer
                      description: Maximum number of items allowed. Applicable only when attribute is multivalue
                      example: 3
                    required: 
                      type: boolean
                      description: Indicates whether the attribute is required
                      example: true
                  required:
                    - key
                    - display_name
                    - description
                    - multivalue
                    - required
                minItems: 1
        500:
          $ref: "#/components/responses/ServerError"

  
  /authority/certificate/files:
    get:
      summary: Get CA Certificate files
      operationId: downloadCaCertificateFiles
      description: Download CA Certificate files
      tags:
        - Certificate Authority
      responses:
        200:
          description: Operation performed successfully.
          content:
            application/zip:
              schema:
                type: string
                format: binary
        404:
          $ref:  "#/components/responses/CaCertificateNotFound"
        500:
          $ref: "#/components/responses/ServerError"
       


  /authority/certificate:
    get:
      summary: Get CA Certificate Info
      operationId: getCaCertificateInfo
      description: Get CA Certificate Information
      tags:
        - Certificate Authority
      responses:
        200:
          description: CA Certificate Info retrieve successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CaCertificate"
        404:
          $ref:  "#/components/responses/CaCertificateNotFound"
        500:
          $ref: "#/components/responses/ServerError"
    put:
      summary: Set existing CA Certificate
      operationId: setCaCertificate
      description: Use an existing CA Certificate
      tags:
        - Certificate Authority
      requestBody:
        content:
          multipart/form-data:
            schema:      
              type: object
              properties:  
                cert_file:  
                  type: string
                  format: binary
                  description: The file containing the CA certificate PEM encoded
                key_file: 
                  type: string
                  format: binary
                  description: The file containing the CA private key PEM encoded
              required:
                - cert_file
                - key_file
      responses:
        201:
          description: Ca Certificate set successfully
        500:
          $ref: "#/components/responses/ServerError"
          
    post:
      summary: Create Certificate Authority
      operationId: createCaCertificate
      description: Create a new CA Certificate
      tags:
        - Certificate Authority
      requestBody:
        description: The Certificate Authority configurations
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CaCertificate"

      responses:
        201:
          description: CA Certificate created successfully
        500:
          $ref: "#/components/responses/ServerError"
        
      


# /certificates
# GET (Lists certificates)

# /certificates/custom
# POST

  /cert-requests/tls-server:
    post:
      summary: Issue TLS-Server certificate
      operationId: issueTlsServerCert
      description: Issues a new Certificate to identify a TLS-Server
      tags:
        - Certificate Requests
      requestBody:
        description: The Certificate details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TLSServerCertificateRequest"

      responses:
        200:
          $ref: '#/components/responses/SuccessfullyIssuedCert'
        400: 
          $ref: '#/components/responses/ConstraintViolation'
        500:
          $ref: "#/components/responses/ServerError"
          
          
  
  /cert-requests/personal:
    post:
      summary: Issue Personal Certificate
      operationId: issuePersonalCert
      description: Issues a new Certificate to identify a Person
      tags:
        - Certificate Requests
      requestBody:
        description: The Certificate details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonalCertificateRequest'

      responses:
        200:
          $ref: '#/components/responses/SuccessfullyIssuedCert'
        400: 
          $ref: '#/components/responses/ConstraintViolation'
        500:
          $ref: "#/components/responses/ServerError"
        
        
  /cert-requests/employee:
    post:
      summary: Issue Employee Certificate
      operationId: issueEmployeeCert
      description: Issues a new Certificate to identify an Employee of an organization
      tags:
        - Certificate Requests
      requestBody:
        description: The Certificate details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeCertificateRequest'

      responses:
        200:
          $ref: '#/components/responses/SuccessfullyIssuedCert'
        400: 
          $ref: '#/components/responses/ConstraintViolation'
        500:
          $ref: "#/components/responses/ServerError"
          
  
  /cert-requests/sub-ca:
    post:
      summary: Issue Sub Certificate-Authority Certificate
      operationId: issueSubCACert
      description: Issues a Sub Certificate-Authority Certificate
      tags:
        - Certificate Requests
      requestBody:
        description: The Certificate details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubCACertificateRequest'

      responses:
        200:
          $ref: '#/components/responses/SuccessfullyIssuedCert'
        400: 
          $ref: '#/components/responses/ConstraintViolation'
        500:
          $ref: "#/components/responses/ServerError"
          
  
  /cert-requests/custom:
    post:
      summary: Issue Customized Certificate
      operationId: issueCustomCert
      description: Issues a new Customized Certificate
      tags:
        - Certificate Requests
      requestBody:
        description: The Certificate details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomCertificateRequest'

      responses:
        200:
          $ref: '#/components/responses/SuccessfullyIssuedCert'
        400: 
          $ref: '#/components/responses/ConstraintViolation'
        500:
          $ref: "#/components/responses/ServerError"
          
      

  /certificates/{serial}:
    get:
      summary: Get Certificate Information
      operationId: GetCertInfo
      description: Get information of a certificate issued by the CA
      tags:
        - Issued Certificates
      parameters: 
        - name: serial
          in: path
          description: The serial number of the certificate
          required: true
          schema:
            type: string
      responses:
        200:
          description: Certificate Information Retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuedCertInfo'
        404: 
          $ref: '#/components/responses/CertificateNotFound'
        500:
          $ref: "#/components/responses/ServerError"
                
        
    


# /certificates/{serial}
# GET (JSON)

# /certificates/{serial}/files/compressed
# GET (Zip file)


components:
  schemas:

    SubjectAlternativeName:
      type: object
      description: A Certificate Subject Alternative name
      properties:
        type: 
          type: string
          description: The type of alternative name
          enum:
            - DNS
            - EMAIL
            - IP_ADDRESS
            - URI
            - DIRECTORY_NAME
            - OTHER_NAME
        value:
          type: string
          description: The value of the alternative name
      required:
        - type
        - value
        
        
    KeyUsage:
      type: string
      description: Represents an peration for which the  Certificate public key is intended to be used.
      enum:
        - DigitalSignature
        - KeyEncipherment
        - DataEncipherment
        - KeyAgreement
        - DecipherOnly
        - EncipherOnly
        - CertificateSign
        - SignCRL
        - NonRepudiation
        
    
    ExtendedKeyUsage:
      type: string
      description: A second degree of restriction in terms of how the public key of a Certificate is intended to be used
      enum:
        - TLS_WEB_SERVER_AUTH
        - TLS_WEB_CLIENT_AUTH
        - SIGN_CODE
        - EMAIL_PROTECTION
        - TIMESTAMPING
        - OCSP_SIGNING
        - IPSEC_END_SYSTEM
        - IPSEC_TUNNEL
        - IPSEC_USER

    CertValidity:
      type: object
      description: The validity of a certificate
      properties:
        from: 
          type: string
          format: date
          description: The date from which the certificate is validate
          example: "2023-01-01"
        until:
          type: string
          format: date
          description: The date from which the certificate should be considered expired
          example: "2023-12-31"
      required:
        - from
        - until

    GeographicLocation:
      type: object
      description: Represents a Geographic location
      properties:
        country:
          type: string
          description: The ISO alpha-2 contry code
          example: MZ
        state:
          type: string
          description: The name of the the state/province in the country
          example: Maputo
        locality:
          type: string
          description: The locality or district of the state
          example: Boane
        street_address:
          type: string
          description: The name of the street plus the number and name of the building
          example: 1234 Main Street
      required:
        - country
        - state
        - locality
        - street_address
        
        
    IssuedCertInfo:
      type: object
      readOnly: true
      description: Information of an issued certificate
      properties:
        serial:
          type: string
          description: The serial number of the issued Certificate
          example: d9028c1c-6778-403a-b888-c72d7de5aeb3
        name:
          type: string
          description: Name of the issued certified. It is obtained from the Certificate Common-Name. 
          example: my-cert
        key_algorithm:
          type: string
          description: The Algorithm for which the Certificate Key-Pair was generated 
          enum:
            - RSA
            - DSA
        key_size:
          type: integer
          description: The size of the Certificate Private Key in bytes
          example: 512
        distinguished_name:
          type: string
          description: The subject X.500 Distinguished name
          example: CN=John Smith, OU=Test, O=IBM, C=GB
        subject_alt_names:
          type: array
          items:
            $ref: '#/components/schemas/SubjectAlternativeName'
        key_usage:
          type: array
          items:
            $ref: '#/components/schemas/KeyUsage'
        extended_key_usage: 
          type: array
          items:
            $ref: '#/components/schemas/ExtendedKeyUsage'
        validity:
          $ref: '#/components/schemas/CertValidity'
      required:
        - name
        - key_algorithm
        - key_size
        - distinguished_name
        - key_usage
        - validity

      

    CaCertificate:
      type: object
      properties:
        name:
          type: string
          description: The common name of the authority
          example: myca
        key_strength:
          type: string
          description: The strength of the key pair to be generated.
          enum:
            - Low
            - Medium
            - High
            - Very-High
        validity:
          $ref: "#/components/schemas/CertValidity"
        location:
          $ref: "#/components/schemas/GeographicLocation"


    BaseCertificateRequest:
      type: object
      properties:
        validity:
          $ref: "#/components/schemas/CertValidity"
        key_strength:
          type: string
          description: The cryptography strength of the key-pair to be generated
          enum:
            - Low
            - Medium
            - High
            - Very-High
        location:
          $ref: '#/components/schemas/GeographicLocation'
      

    CustomCertificateRequest:
      allOf:
        - $ref: "#/components/schemas/BaseCertificateRequest"
        - type: object
          description: A Request to generate a customized certificate
          properties:
            subject_distinguished_name:
              type: array
              description: Set of attributes that compose the Subject distinguished name. The order of the attributes matter
              items:
                type: object
                description: A Relative Distinguished Name
                properties:
                  key:
                    type: string
                    description: The unique identifier of the attribute
                    example: common-name
                  value:
                    type: string
                    description: A value for the attribute
                    example: example.com
                required:
                  - key
                  - value
                minItems: 1
            key_usage:
              type: array
              description: Defines the operations for which the  Certificate public key is intended to be used.
              items:
                $ref: '#/components/schemas/KeyUsage'
              minItems: 1
            extended_key_usage:
              type: array
              description: A second degree of restriction in terms of how the public key of a Certificate is intended to be used. The extended key usage is not about the operations that can be performed with the key, it is instead about the context in which those operations can be performed.
              items:
                $ref: '#/components/schemas/ExtendedKeyUsage'
              minItems: 1
            subject_alt_names:
              type: array
              description: The subject alternative names to associate to the certificate
              items:
                $ref: '#/components/schemas/SubjectAlternativeName'
              
              
          required:
            - validity
            - key_strength
            - location
            - subject_distinguished_name
            - key_usage
      

    PersonalCertificateRequest:
      allOf:
        - $ref: "#/components/schemas/BaseCertificateRequest"
        - type: object
          description: A Request to generate a certificate to identify an individual
          properties:
            first_name:
              type: string
              description: The person's first name
              example: Yaka
            surname: 
              type: string
              description: The person's surname
              example: Matavele
            telephone: 
              type: string
              description: The person's telephone number
            email_addresses: 
              type: array
              description: The email addresses of the person
              items:
                type: string
                description: An email address
                minItems: 1
            usernames: 
              type: array
              description: The usernames of the person. Computer and online usernames are expected to be Listed.
              items:
                type: string
                description: A username
                minItems: 1
          required:
            - validity
            - key_strength
            - location
            - first_name
            - surname
            - telephone
            - email_addresses
    
    
    EmployeeCertificateRequest:
      allOf:
        - $ref: "#/components/schemas/PersonalCertificateRequest"
        - type: object
          description: A Request to generate a certificate to identify an individual as an employee.
          properties:
            company:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the company to which the person is employed
                department:
                  type: string
                  description: The name of the department to which the employee belongs
              required:
                - name
                - department
    
    SubCACertificateRequest:
      allOf:
        - type: object
          description: A Request to generate a Sub Certificate-Authority certificate
          properties:
            name:
              type: string
              description: The name of the Sub Certificate Authority
              example: my-subca
        - $ref: "#/components/schemas/BaseCertificateRequest"
          required:
            - validity
            - key_strength
            - location
            - name

    TLSServerCertificateRequest:
      allOf:
        - $ref: "#/components/schemas/BaseCertificateRequest"
        - type: object
          description: A Request to generate a Certificate to identify a TLS Server
          properties:
            domains:
              type: array
              description: The domains that are associated to the server. All listed domains will be added to the certificate as DNS Subject Alternative Names and The first domain in the array will be used as common-name.
              items:
                type: string
                description: A domain name
                example: example.com
              minItems: 1
          required:
            - domains
            - validity
            - key_strength
            - location
            
            
    IssuedCert:
      type: object
      description: Represents an issued certificate
      properties:
        serial:
          type: string
          description: The issued certificate serial number
          example: 448d28c6-814b-4d5d-863c-fc1a2fc8f355
      required:
        - serial



    Problem:
      type: object
      properties:
        type:
          type: string
          format: uri
          description: |
            An absolute URI that identifies the problem type.  When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          default: 'about:blank'
          example: 'https://zalando.github.io/problem/constraint-violation'
        title:
          type: string
          description: |
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        status:
          type: integer
          format: int32
          description: |
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: |
            A human readable explanation specific to this occurrence of the
            problem.
          example: Connection to database timed out
        instance:
          type: string
          format: uri
          description: |
            An absolute URI that identifies the specific occurrence of the problem.
            It may or may not yield further information if dereferenced.

  responses:
  
    SuccessfullyIssuedCert:
      description: Certificate issued successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IssuedCert'
      
  
    ServerError:  # Can be referenced as '#/components/responses/ServerError'
      description: An error occurred.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: /problems/server-error
            title: Server error
            status: 500
            detail: An internal server error occurred
      
  
    ConstraintViolation:
      description: Constraint violation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: /problems/constraint-violation
            title: Constraint Violation
            status: 422
            violations:
              - field: billing_address.first_name
                message: may not be empty
              - field: groups
                message: must not contain multiple different delivery addresses

    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: /problems/bad-request
            title: Bad Request
            status: 400
            detail: JSON Payload missing

    CaCertificateNotFound:
      description: Not Found
      content:
          application/json:
            schema:
              $ref: '#/components/schemas/Problem'
            example:
              type: /problems/not-found
              title: Not found
              status: 404
              detail: CA Certificate not found
              
              
    CertificateNotFound:
      description: Not Found
      content:
          application/json:
            schema:
              $ref: '#/components/schemas/Problem'
            example:
              type: /problems/not-found
              title: Not found
              status: 404
              detail: Certificate not found          
